// Code generated by go-bindata.
// sources:
// data/vessel.csv
// data/vessel.yml
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataVesselCsv = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x32\xd0\x31\xd0\x31\x04\x41\x5e\x2e\x43\x1d\x03\x30\x84\x32\x51\x44\xa1\x4c\x28\x04\x04\x00\x00\xff\xff\x20\x4f\x56\x7f\x35\x00\x00\x00")

func dataVesselCsvBytes() ([]byte, error) {
	return bindataRead(
		_dataVesselCsv,
		"data/vessel.csv",
	)
}

func dataVesselCsv() (*asset, error) {
	bytes, err := dataVesselCsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/vessel.csv", size: 53, mode: os.FileMode(420), modTime: time.Unix(1472424952, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataVesselYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x93\x3f\x6f\xdb\x30\x10\xc5\x77\x7f\x8a\x83\x17\x2f\x71\x11\xc9\xb1\x13\x78\x29\x02\x34\x68\x3b\x34\x43\xd1\xa5\x23\x4d\x9e\x23\xc2\xa4\x8e\xe0\x9f\xaa\xfa\xf6\x3d\x2a\x31\xd3\x46\x74\x63\xc0\xc0\x03\x25\xea\xfd\xf8\xee\x71\xbd\x5e\x2f\x64\x27\xec\x01\x7d\xd8\x2f\x00\xd6\xfc\x07\x50\x18\xe4\x1e\x96\x3f\x3a\x84\x97\x87\x30\x08\x63\x02\x1c\xd2\xe1\x60\x10\x74\x0f\xc1\xd0\x00\x96\xa2\xa6\xfe\xc3\xf2\x79\x13\x91\xff\x34\x6d\x94\x64\x54\x59\x9a\x3e\x9b\x7f\x6b\x68\x26\xa5\xd5\x1e\xae\x27\xf5\xfb\x2c\xc6\x67\xf1\xaf\x39\x11\x28\xe1\x4f\x10\x09\x02\x22\x0c\x9d\x88\x57\x0c\x10\x21\x90\xc5\xd8\xe9\xfe\x09\x74\x00\xe5\xb5\x73\xac\x67\x10\x96\x21\xc6\x1a\xc5\x75\x51\x6d\xe1\x69\xce\x3c\xcd\x45\x9e\xaf\x71\x15\xd8\x9a\x0d\xc7\x7c\xfe\x0e\x3d\xc2\x48\x09\x8e\x88\x26\x0b\xcf\xa0\xfd\x53\x42\x08\x51\xcb\xd3\xf4\xce\xb4\x6a\x29\xc5\x6e\x1e\x91\x47\x71\x62\xec\xcb\x31\x65\xb5\x29\xea\xa6\xa0\xb6\x33\xd4\xa6\x32\x37\x8f\x4c\x2b\xc0\x93\xcc\x2e\x79\x8a\xda\x83\xe8\x15\xaf\x49\xaf\x0f\x2f\x3c\x3a\xa2\xad\x1a\xb7\x6f\x70\x07\xe1\x6d\x0d\xb5\x2d\x6a\x57\x00\x37\x33\xc0\xf6\x2d\xe0\x4f\xce\xed\xd4\x33\x1b\xd0\x2f\xee\x16\x39\xec\x21\xea\x3e\x00\x1d\xe1\x48\xa4\xae\x20\x38\x6d\x4c\x26\x57\x29\x44\x10\xd2\x53\x08\x10\xb9\x8f\x47\xc3\x04\xb3\x38\x97\xab\x6f\xc8\x2f\x7c\xe1\x92\xae\x96\x35\xd0\xd7\x24\xb7\x05\xf4\xe6\x0c\xda\x5e\x4c\xf2\x9e\xa7\x89\xe8\x20\x74\xe2\x18\xc1\x27\x46\x54\x34\x30\x2c\x71\x22\x6a\x6a\xe2\x30\x35\x41\x09\xeb\x2a\x54\xcd\xfd\x7b\x38\x4d\x25\xc1\xed\x19\x6c\xf3\x3f\x30\x27\x24\x86\xa4\x63\xbe\x05\xd2\x27\xeb\x0c\x2a\xa0\xfe\xaf\x94\xe0\x91\xb8\xa7\x86\x6f\xcb\x1c\x4d\x1a\x0a\x18\xab\x70\xdb\xa2\x6e\x0b\xd2\x6e\x0e\x60\x28\x29\xe8\x92\xb5\x3c\x26\x2e\x74\xfe\x5e\xbe\xab\xd9\xde\xd1\xc0\x63\x0d\xc9\x39\x33\x7e\x9c\x59\x73\x74\x3d\xef\xa9\x7a\xef\x8a\xba\x2b\xde\xb7\xb3\x42\x6d\x2a\x71\xa0\xd7\x38\x15\x28\x0c\x3a\xca\x0e\x43\x65\x1c\xdf\x1f\x3e\x3f\x3c\xd6\x27\xf2\x7a\xd4\xbb\x59\x2d\x36\x8b\x3f\x01\x00\x00\xff\xff\x8a\x09\xe3\xcf\x27\x05\x00\x00")

func dataVesselYmlBytes() ([]byte, error) {
	return bindataRead(
		_dataVesselYml,
		"data/vessel.yml",
	)
}

func dataVesselYml() (*asset, error) {
	bytes, err := dataVesselYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/vessel.yml", size: 1319, mode: os.FileMode(420), modTime: time.Unix(1472429671, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/vessel.csv": dataVesselCsv,
	"data/vessel.yml": dataVesselYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"vessel.csv": &bintree{dataVesselCsv, map[string]*bintree{}},
		"vessel.yml": &bintree{dataVesselYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

